{"ast":null,"code":"import { DateTime } from 'luxon';\nconst today = DateTime.now().weekday;\nconst yesterday = DateTime.now().minus({\n  days: 1\n}).weekday;\nconst twoDaysAgo = DateTime.now().minus({\n  days: 2\n}).weekday;\nconst tomorrow = DateTime.now().plus({\n  days: 1\n}).weekday;\nconst dayAfterTomorrow = DateTime.now().plus({\n  days: 2\n}).weekday;\nconst month = DateTime.now().c.month;\nconst formatMonth = month.toString().length < 2 ? '0' + month : month;\nconsole.log({\n  month,\n  formatMonth\n});\nconst fixturesByDate = `${DateTime.now().c.year}-${formatMonth}-${DateTime.now().c.day}`;\nconsole.log(fixturesByDate);\n\nconst AppendToday = () => {\n  switch (today) {\n    case 7:\n      return 'SUN';\n\n    case 1:\n      return 'MON';\n\n    case 2:\n      return 'TUE';\n\n    case 3:\n      return 'WED';\n\n    case 4:\n      return 'THUR';\n\n    case 5:\n      return 'FRI';\n\n    case 6:\n      return 'SAT';\n\n    default:\n      break;\n  }\n};\n\n_c = AppendToday;\n\nconst AppendTomorrow = () => {\n  switch (tomorrow) {\n    case 7:\n      return 'SUN';\n\n    case 1:\n      return 'MON';\n\n    case 2:\n      return 'TUE';\n\n    case 3:\n      return 'WED';\n\n    case 4:\n      return 'THUR';\n\n    case 5:\n      return 'FRI';\n\n    case 6:\n      return 'SAT';\n\n    default:\n      break;\n  }\n};\n\n_c2 = AppendTomorrow;\n\nconst AppendNextTomorrow = () => {\n  switch (dayAfterTomorrow) {\n    case 7:\n      return 'SUN';\n\n    case 1:\n      return 'MON';\n\n    case 2:\n      return 'TUE';\n\n    case 3:\n      return 'WED';\n\n    case 4:\n      return 'THUR';\n\n    case 5:\n      return 'FRI';\n\n    case 6:\n      return 'SAT';\n\n    default:\n      break;\n  }\n};\n\n_c3 = AppendNextTomorrow;\n\nconst AppendYesterday = () => {\n  switch (yesterday) {\n    case 7:\n      return 'SUN';\n\n    case 1:\n      return 'MON';\n\n    case 2:\n      return 'TUE';\n\n    case 3:\n      return 'WED';\n\n    case 4:\n      return 'THUR';\n\n    case 5:\n      return 'FRI';\n\n    case 6:\n      return 'SAT';\n\n    default:\n      break;\n  }\n};\n\n_c4 = AppendYesterday;\n\nconst AppendTwoDaysAgo = () => {\n  switch (twoDaysAgo) {\n    case 7:\n      return 'SUN';\n\n    case 1:\n      return 'MON';\n\n    case 2:\n      return 'TUE';\n\n    case 3:\n      return 'WED';\n\n    case 4:\n      return 'THUR';\n\n    case 5:\n      return 'FRI';\n\n    case 6:\n      return 'SAT';\n\n    default:\n      break;\n  }\n};\n\n_c5 = AppendTwoDaysAgo;\nexport { AppendTwoDaysAgo, AppendToday, AppendYesterday, AppendNextTomorrow, AppendTomorrow, fixturesByDate };\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AppendToday\");\n$RefreshReg$(_c2, \"AppendTomorrow\");\n$RefreshReg$(_c3, \"AppendNextTomorrow\");\n$RefreshReg$(_c4, \"AppendYesterday\");\n$RefreshReg$(_c5, \"AppendTwoDaysAgo\");","map":{"version":3,"sources":["C:/Users/JOSEPH/Desktop/project/frameworks/sportscore/my-app/src/Utils/AppendDay.jsx"],"names":["DateTime","today","now","weekday","yesterday","minus","days","twoDaysAgo","tomorrow","plus","dayAfterTomorrow","month","c","formatMonth","toString","length","console","log","fixturesByDate","year","day","AppendToday","AppendTomorrow","AppendNextTomorrow","AppendYesterday","AppendTwoDaysAgo"],"mappings":"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","sourcesContent":["\r\nimport { DateTime } from 'luxon'\r\n\r\n\r\nconst today = DateTime.now().weekday\r\nconst yesterday = DateTime.now().minus({days: 1}).weekday\r\nconst twoDaysAgo = DateTime.now().minus({days: 2}).weekday\r\nconst tomorrow = DateTime.now().plus({days: 1}).weekday\r\nconst dayAfterTomorrow = DateTime.now().plus({days: 2}).weekday\r\n\r\nconst month = DateTime.now().c.month\r\nconst formatMonth = month.toString().length < 2 ? '0'+month : month;\r\nconsole.log({month, formatMonth})\r\nconst fixturesByDate =  `${DateTime.now().c.year}-${formatMonth}-${DateTime.now().c.day}`\r\n    console.log(fixturesByDate)\r\n\r\nconst AppendToday = () => {\r\n\r\n    switch (today) {\r\n        case 7:\r\n            return 'SUN'\r\n        case 1:\r\n            return 'MON'\r\n        case 2:\r\n            return 'TUE'\r\n        case 3:\r\n            return 'WED'\r\n        case 4:\r\n            return 'THUR'\r\n        case 5:\r\n            return 'FRI'\r\n        case 6:\r\n            return 'SAT'\r\n    \r\n        default:\r\n            break;\r\n    }\r\n\r\n}\r\n  \r\n\r\nconst AppendTomorrow = ()  => {\r\n    switch (tomorrow) {\r\n        case 7:\r\n            return 'SUN'\r\n        case 1:\r\n            return 'MON'\r\n        case 2:\r\n            return 'TUE'\r\n        case 3:\r\n            return 'WED'\r\n        case 4:\r\n            return 'THUR'\r\n        case 5:\r\n            return 'FRI'\r\n        case 6:\r\n            return 'SAT'\r\n    \r\n        default:\r\n            break;\r\n    }\r\n} \r\n\r\nconst AppendNextTomorrow = ()  => {\r\n    switch (dayAfterTomorrow) {\r\n        case 7:\r\n            return 'SUN'\r\n        case 1:\r\n            return 'MON'\r\n        case 2:\r\n            return 'TUE'\r\n        case 3:\r\n            return 'WED'\r\n        case 4:\r\n            return 'THUR'\r\n        case 5:\r\n            return 'FRI'\r\n        case 6:\r\n            return 'SAT'\r\n    \r\n        default:\r\n            break;\r\n    }\r\n} \r\n\r\nconst AppendYesterday = () =>  {\r\n    switch (yesterday) {\r\n        case 7:\r\n            return 'SUN'\r\n        case 1:\r\n            return 'MON'\r\n        case 2:\r\n            return 'TUE'\r\n        case 3:\r\n            return 'WED'\r\n        case 4:\r\n            return 'THUR'\r\n        case 5:\r\n            return 'FRI'\r\n        case 6:\r\n            return 'SAT'\r\n    \r\n        default:\r\n            break;\r\n    }\r\n}   \r\n\r\nconst AppendTwoDaysAgo = ()  => {\r\n    switch (twoDaysAgo) {\r\n        case 7:\r\n            return 'SUN'\r\n        case 1:\r\n            return 'MON'\r\n        case 2:\r\n            return 'TUE'\r\n        case 3:\r\n            return 'WED'\r\n        case 4:\r\n            return 'THUR'\r\n        case 5:\r\n            return 'FRI'\r\n        case 6:\r\n            return 'SAT'\r\n    \r\n        default:\r\n            break;\r\n    }\r\n}\r\nexport { AppendTwoDaysAgo, AppendToday, AppendYesterday, AppendNextTomorrow, AppendTomorrow, fixturesByDate  }  "]},"metadata":{},"sourceType":"module"}